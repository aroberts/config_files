# alias migrate="rake db:migrate db:test:prepare"
# alias remigrate="rake db:migrate && rake db:migrate:redo && rake db:schema:dump db:test:prepare"

__check(){
  which "$1" >/dev/null
}

alias versions_pip="pip freeze | grep -v \"^\-e\" | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:'"
alias outline='ag --nocolor "^\s*(class|def)\s"'
alias sl=ls
alias mivm=mvim
alias unflac='find . -iname \*.flac -print0 | xargs -0 -n 1 flac2mp3'

alias ag='\ag --pager="less -XFR"'

alias xjcp='xargs -J % cp %'

alias fixscreen='sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.screensharing.plist &&  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist'

alias tls='tmux ls'

which htop >/dev/null && alias top=htop
which hub >/dev/null && alias git=hub
which rerun >/dev/null && alias prerun='rerun -p "**/*.{py,env,dev,foreman,js,css,hbs,scss}"'
which rerun >/dev/null && alias pfs='prerun foreman start'

__check dscacheutil && alias flush_dns="dscacheutil -flushcache && sudo killall -HUP mDNSResponder"

__check docker && docker-running-versions() {
  docker inspect $(docker ps  | awk '{print $2}' | grep -v ID) | jq -c .[].RepoTags
}

__check docker-compose && alias dc="docker-compose"
__check docker-compose && alias dcu="docker-compose up -d"
__check docker-compose && alias dcuf="docker-compose up -d --force-recreate"
__check docker-compose && alias dcul="docker-compose up -d && docker-compose logs"
__check docker-compose && alias dclf="docker-compose logs -f --tail=100"

__check lazydocker && ldoc() {
  DOCKER_HOST=ssh://${2:-ansible}@$1 lazydocker
}

__check kafkacat && alias kcat='kafkacat -Xapi.version.request=false -Xbroker.version.fallback=0.9.0.1'
__check kafkacat && alias kcat_082='kafkacat -Xapi.version.request=false -Xbroker.version.fallback=0.8.2'

__check ansible-vault && alias av=ansible-vault
__check ansible-playbook && alias ap="time ansible-playbook"

__check docker && alias docker-ip="docker inspect --format '{{ .NetworkSettings.IPAddress }} {{ .Name }}'"

uname -a | grep -v Darwin >/dev/null && alias ls='ls --color'
uname -a | grep -v Darwin >/dev/null && function addsysuser() {
  syntax="addsysuser <description> <shortname>"
  if [[ -z "$1" || -z "$2" ]]; then
    echo $syntax
  else
    $__SUDOCMD adduser -D -g "$1" "$2" "$2" && id "$2"
  fi
}

unfunction __check
